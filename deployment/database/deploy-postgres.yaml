# ---------- PV/PVC ----------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: epl-data-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/home/ubuntu/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: epl-data-volume-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# ---------- CONFIGMAP ----------
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
data:
  DB_NAME: "epl"
  DB_SUPERUSER: "postgres"
  postgresql.conf: |
    listen_addresses = '*'
    max_connections = 200
    shared_buffers = 512MB
    effective_cache_size = 1536MB
    maintenance_work_mem = 128MB
    wal_level = replica
    synchronous_commit = on
    max_wal_size = 1GB
    min_wal_size = 80MB
    random_page_cost = 1.1
    autovacuum = on
    log_min_duration_statement = 5000

# ---------- HEADLESS + CLIENT SERVICES ----------
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-hl
  labels:
    app: postgres
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
    - name: pg
      port: 5432
      targetPort: tcp-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
    - name: pg
      port: 5432
      targetPort: tcp-postgres

# ---------- STATEFULSET (deploys the DB) ----------
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres-hl"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        fsGroupChangePolicy: OnRootMismatch
      # OPTIONAL: ensure hostPath perms (uncomment if you get permission errors)
      initContainers:
        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
            allowPrivilegeEscalation: false
          command: ["sh","-c","chown -R 999:999 /var/lib/postgresql/data || true"]
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgres
          image: postgres:17-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: tcp-postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_NAME
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_SUPERUSER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          args: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: pg-config
              mountPath: /etc/postgresql
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["sh","-c","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 3
            failureThreshold: 6
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "2Gi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: epl-data-volume-claim
        - name: pg-config
          configMap:
            name: db-config
            items:
              - key: postgresql.conf
                path: postgresql.conf

# ---------- NETWORK POLICY ----------
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-allow-apps
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: epl-api
        - podSelector:
            matchLabels:
              app: etl-jobs
      ports:
        - protocol: TCP
          port: 5432

# ---------- POD DISRUPTION BUDGET ----------
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgres
