name: Build & Push to GHCR

on:
  push:
    branches: [ "**" ]
    paths:
      - "backend/api/**"
      - "backend/data-pipeline/**"
      - "frontend/**"
      - ".github/workflows/publish-ghcr.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  changes:
    name: Detect changed components
    runs-on: ubuntu-latest
    outputs:
      api:       ${{ steps.filter.outputs.api }}
      etl:       ${{ steps.filter.outputs.etl }}
      frontend:  ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'backend/api/**'
            etl:
              - 'backend/data-pipeline/**'
            frontend:
              - 'frontend/**'

  build-api:
    name: Build & Push epl-api:dev
    needs: changes
    if: needs.changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Compute image name
        run: |
          OWNER_LC="$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=${{ env.REGISTRY }}/${OWNER_LC}/epl-api:dev" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: ./backend/api
          file: ./backend/api/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-etl:
    name: Build & Push epl-etl:latest
    needs: changes
    if: needs.changes.outputs.etl == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Compute image name
        run: |
          OWNER_LC="$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=${{ env.REGISTRY }}/${OWNER_LC}/epl-etl:latest" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: ./backend/data-pipeline
          file: ./backend/data-pipeline/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build & Push epl-frontend-react:dev
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Compute image name
        run: |
          OWNER_LC="$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=${{ env.REGISTRY }}/${OWNER_LC}/epl-frontend-react:dev" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
